import{e}from"./app.140fd78c.js";import{_ as p}from"./plugin-vue_export-helper.5a098b48.js";const d={},o=e('<h1 id="调试模式" tabindex="-1"><a class="header-anchor" href="#调试模式" aria-hidden="true">#</a> 调试模式</h1><blockquote><p>翻译自原文档：https://osdn.net/projects/emuera/wiki/debug</p></blockquote><p>调试模式是1.750版中增加的模式。</p><p>这个功能与 &quot;使用调试命令 &quot;选项无关。</p><h2 id="在调试模式下启动emuera" tabindex="-1"><a class="header-anchor" href="#在调试模式下启动emuera" aria-hidden="true">#</a> 在调试模式下启动Emuera</h2><p>要在调试模式下启动Emuera，请将<code>-Debug</code>作为命令行参数。</p><p>传递命令行参数的一个简单方法是：</p><p>右键点击EmueraXXXX.exe，选择 &quot;创建快捷方式&quot;。</p><p>在创建的快捷方式上点击右键，选择 &quot;属性&quot;。</p><p>在属性中，在 &quot;链接到&quot;字符串的末尾添加<code>-Debug</code>。</p><p>（如果链接是用&quot;&quot;括起来的，比如 &quot;C:~~\\EmueraXXX.exe&quot;，在<code>&quot;&quot;</code>后面加上<code>-Debug</code>）</p><p>双击该快捷方式，在调试模式下启动它。</p><h2 id="在调试模式下的操作" tabindex="-1"><a class="header-anchor" href="#在调试模式下的操作" aria-hidden="true">#</a> 在调试模式下的操作</h2><p>当你在调试模式下启动时，会自动创建一个名为debug的文件夹。</p><p>变量观察列表和调试控制台日志，如下所述，都保存在调试文件夹中。</p><p>当处于调试模式时，除了正常执行的行之外，以<code>;#;</code>开头的行和<code>[IF_DEBUG]</code>和<code>[ENDIF]</code>之间的行也会被执行。</p><p>当不在调试模式时，这些行被当作注释，不被执行。</p><p>相反，当处于调试模式时，<code>[IF_NDEBUG]</code>和<code>[ENDIF]</code>之间的行被视为注释，不被执行。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>;#;PRINTL 这一行只在调试模式下执行。\n[IF_DEBUG]\n  PRINTL 这一行只在调试模式下执行。\n[ENDIF]\n[IF_NDEBUG]\n  PRINTL 这一行只有在非调试模式下才会执行。\n[ENDIF]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此外，还有一些指令只在调试模式下发挥作用。</p><p><code>DebugPrint</code>、<code>DebugPrintForm</code>、<code>DebugPrintL</code>和<code>DebugPrintFormL</code>指令的功能与<code>Print</code>语句相同，只是输出到调试窗口。</p><p>如果参数为零，<code>Assert</code>指令就会产生错误。 如果参数为非零，它就不做任何事情。</p><p><code>DebugClear</code>指令清除调试窗口的所有字符。没有参数。</p><p>这些指令在非调试模式下没有任何作用。</p><p>它也不解析参数，所以如果有问题，比如一个错误的<code>DebugPrintForm</code>，在非调试模式下什么也不会发生。</p><p>它们被视为无用的指令，而不是注释行，所以它们在<code>SIF</code>语句之后立即使用是安全的。</p><p>此外，变量<code>__FILE__</code>，<code>__LINE__</code>和<code>__FUNCTION__</code>只在调试模式下返回有意义的值。</p><p>在非调试模式下，它们返回0或一个空字符串。</p><h2 id="调试窗口" tabindex="-1"><a class="header-anchor" href="#调试窗口" aria-hidden="true">#</a> 调试窗口</h2><p>当处于调试模式时，你可以通过从菜单中选择调试或在控制台中输入<code>@DEBUG</code>来打开调试窗口。</p><p>你也可以在主控制台使用快捷键<code>Ctrl+D</code>来打开调试窗口。</p><p>根据配置选项，调试窗口将在启动时自动打开。</p><p>调试窗口的大小是可变的。 请根据使用情况改变尺寸。</p><p>调试窗口的初始尺寸和位置可以从设置对话框的“调试”部分改变。</p><p>当前的尺寸和位置可以在调试窗口打开的情况下通过打开设置对话框获得。</p><p>调试窗口中显示的信息可以在调试窗口的不同标签之间进行切换。</p><p>当调试窗口获得焦点或切换标签时，这些信息就会被更新。</p><p>也可以通过使用<code>Ctrl+R</code>快捷键从主控制台刷新信息，或者使用<code>DEBUGCLEAR</code>指令清除所有字符。</p><h3 id="变量监视" tabindex="-1"><a class="header-anchor" href="#变量监视" aria-hidden="true">#</a> 变量监视</h3><p>在标有<code>目标</code>一栏的底部点击。你将进入编辑模式。</p><p>输入你想知道的变量名称，如<code>TALENT:MASTER:2</code>或<code>NAME:TARGET</code>，其数值将显示在<code>数值</code>部分。</p><p>如果在检索数值时发生错误，将显示错误的细节。</p><p>如果你想删除目标，请编辑目标并使其成为一个空字符串。</p><p>当变量表被更新时，该行将被删除。</p><p>添加到变量表的目标在调试窗口关闭时被保存，在打开时被加载。</p><p>如果你想在其他时间保存和加载，请使用菜单<code>文件</code>来保存和加载。</p><p>你可以使用常量和表达式以及变量作为<code>目标</code>，但在表达式中调用函数时要小心。</p><p>变量表每次更新其值时实际上都会调用表达式中的函数。</p><p>如果被调用的表达式函数有副作用，比如改变其他变量，那么每次更新变量表时都会出现副作用。</p><h3 id="堆栈追踪" tabindex="-1"><a class="header-anchor" href="#堆栈追踪" aria-hidden="true">#</a> 堆栈追踪</h3><p>这是关于被调用的函数的信息。</p><p>最上面的是当前函数，接着是调用当前函数的函数，然后是调用该函数的函数，以此类推。</p><h3 id="控制台" tabindex="-1"><a class="header-anchor" href="#控制台" aria-hidden="true">#</a> 控制台</h3><p>一个用于调试的控制台。</p><p>它是<code>DebugPrint</code>和<code>DebugPrintForm</code>的输出目的地。</p><p>任何输出到主控制台的信息，如错误或警告，也会输出到调试控制台。</p><p>控制台底部的文本框允许你输入调试命令。</p><p>与主控制台中的调试命令不同，你不需要在它们前面加上<code>@</code>。</p><p>即使在<code>使用调试命令</code>选项为<code>NO</code>时，该功能也是可用的。</p><p>同时，<code>MASTER</code>的名字也不会被改变。【?】</p>',60);var c=p(d,[["render",function(e,p){return o}]]);export{c as default};
