import{e}from"./app.4772d866.js";import{_ as a}from"./plugin-vue_export-helper.5a098b48.js";const n={},s=e('<h1 id="函数与预处理器" tabindex="-1"><a class="header-anchor" href="#函数与预处理器" aria-hidden="true">#</a> 函数与预处理器</h1><blockquote><p>翻译自原文档：https://osdn.net/projects/emuera/wiki/exfunc</p></blockquote><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="eventload" tabindex="-1"><a class="header-anchor" href="#eventload" aria-hidden="true">#</a> @EVENTLOAD</h3><p>在加载数据后立即调用。</p><p>由于它是一个事件函数，它可以被定义一次以上。</p><p>如果没有定义<code>@EVENTLOAD</code>，它将转到<code>@SHOW_SHOP</code>（与 Eramaker 的行为相同）。</p><h3 id="title-loadgame" tabindex="-1"><a class="header-anchor" href="#title-loadgame" aria-hidden="true">#</a> @TITLE_LOADGAME</h3><p>当在标准标题屏幕上选择加载时被调用。</p><p>如果<code>@TITLE_LOADGAME</code>被定义，标题可以使用它自己的加载屏幕。</p><p>如果没有定义，就会使用标准的加载屏幕。</p><p>如果<code>@SYSTEM_TITLE</code>被定义，<code>@TITLE_LOADGAME</code>将不会被调用，除非你明确地调用它。</p><h3 id="system-autosave" tabindex="-1"><a class="header-anchor" href="#system-autosave" aria-hidden="true">#</a> @SYSTEM_AUTOSAVE</h3><p>当要进行自动保存时调用。</p><p>你可以定义你自己的自动保存内容。</p><p>如果没有定义，就会使用标准的保存功能。</p><h3 id="system-title" tabindex="-1"><a class="header-anchor" href="#system-title" aria-hidden="true">#</a> @SYSTEM_TITLE</h3><p>当csv加载完毕时，它被调用。</p><p>它也被称为<code>BEGIN TITLE</code>。</p><p>你可以通过定义<code>@SYSTEM_TITLE</code>来使用你自己的标题屏幕。</p><p>如果没有定义，就会使用标准的标题屏幕。</p><h3 id="calltrainend" tabindex="-1"><a class="header-anchor" href="#calltrainend" aria-hidden="true">#</a> @CALLTRAINEND</h3><p>在<code>CALLTRAIN</code>的自动执行结束后，这个函数会从系统内部自动调用。</p><p>请注意，它不是一个事件函数，不能被多重定义。</p><h3 id="自制函数中的参数说明" tabindex="-1"><a class="header-anchor" href="#自制函数中的参数说明" aria-hidden="true">#</a> 自制函数中的参数说明</h3><p>1.54u和1.60以后的规格是不同的! 在1.54u和1.60及以后的版本中，规格是不同的</p><h4 id="格式" tabindex="-1"><a class="header-anchor" href="#格式" aria-hidden="true">#</a> 格式</h4><p>函数的定义：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@(函数名),(参数1),{(参数2)....}\n若参数为数值：ARG(:0,1,2...)、若参数为字符串：ARGS(:0,1,2...)\n在函数中使用#DIM或#DIMS定义的私有变量也可以被指定为参数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>函数的调用：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>CALL (函数名),(参数1),{(参数2)....}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>数字可以是数学或字符串表达式。</p><p>当使用字符串字元（常数）作为参数时，必须用<code>&quot;&quot;</code>括起来。</p><p>要使用一个格式化的字符串字头作为参数，请将其写成<code>@&quot;~~&quot;</code>。</p><p>除了<code>CALL</code>之外，同样的格式也可以用于<code>JUMP</code>、<code>CALLFORM</code>和<code>TRYCALL</code>。</p><p>你可以为函数指定任何数量的参数。</p><p>从ver1.808开始，如果函数的类型和调用者的类型不同，函数将不会从数字转换为字符串，或从字符串转换为数字，并且会发生错误。</p><p>如果你想像ver1.807或更早的版本那样用数字字符串参数调用一个函数，请改变配置设置或使用<code>TOSTR</code>函数。</p><p>该参数可以省略。 如果省略，0将被分配给数字参数，空字符串将被分配给字符串参数（如果没有设置初始值）。</p><p>然后，被调用的函数可以参考<code>ARG</code>和<code>ARGS</code>中传递的值</p><p>请注意，由于这本质上是一个逐值传递，改变ARG的内容不会改变原始变量的值，等等。</p><p>可以使用<code>ARG</code>、<code>ARGS</code>，或者在函数中使用<code>#DIM</code>或<code>#DIMS</code>作为参数定义的私有变量（如<code>A</code>或<code>STR</code>）以外的变量，但有一些限制。</p><p>从ver1.808开始，这些变量不能用来设置初始值，而且参数不能省略。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>;定义\n@FOOBAR, ARG:0, ARGS:0\n  ～～\n@HOGEHOGE, ARG:0, ARG:1, ARG:2\n  ～～\n;调用\n;参数为变量\nCALL FOOBAR, X , STR:0\n;参数为常量\nCALL FOOBAR, 123 , &quot;ABC&quot;\n;参数为格式化的字符串\nCALL FOOBAR, 123 , @&quot;[{COUNT}] あいう&quot;\n;参数为表达式\nCALL FOOBAR, X + 10, &quot;あいう&quot; * 10\n;参数完全省略\nCALL FOOBAR\n;省略第1个参数\nCALL FOOBAR, , &quot;あいう&quot;\n;省略第2个参数\nCALL FOOBAR, 123\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;错误示例&gt;\n;错误（参数太多）\nCALL FOOBAR, X , STR:0, Y\n;错误（错误的参数类型--试图将一个字符串分配给一个数字类型的第一个参数）\nCALL FOOBAR, &quot;ABC&quot;, &quot;DEF&quot;\n;错误（错误的参数类型--试图将一个数字分配给字符串类型的第二个参数）\nCALL FOOBAR, 123 , 456\n&lt;可以使用但不建议使用的例子&gt;\n;分配可以是ARG，而不是ARGS，但通常建议使用ARG\n@FOOBAR, X, Y\n;也可以使替代物成为变量，但这将降低可读性\n@FOOBAR, ARG:X, ARG:Y\n;可读性降低\n@FOOBAR, ARG:0, ARG:(ARG:0)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="参数的默认值" tabindex="-1"><a class="header-anchor" href="#参数的默认值" aria-hidden="true">#</a> 参数的默认值</h4><p>可以为一个函数参数设置一个初始值。</p><p>当设置初始值时，函数侧看起来是这样的：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@(函数名),(参数1 = 初始值1),{(参数2 = 初始值2)....}\n对于数字，ARG(:0,1,2...)、对于字符串，ARGS(:0,1,2...)、\n或在函数中使用#DIM或#DIMS定义的私有变量\n如果指定了任何其他值，就不能设置初始值。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>只有常数和常数字符串可以被指定为初始值，而不是变量。</p><p>字符串的初始值必须用<code>&quot;&quot;</code>括起来。</p><p>如果你设置了一个初始值，而调用者省略了一个参数，那么你设置的值将被分配给初始值。</p><p>如果函数被调用时没有参数，传递给<code>ARG</code>和<code>ARGS</code>的值将照常被分配。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>;设置初始值（部分可以省略）\n@FUNCTION, ARGS:0 = &quot;ABC&quot;, ARG:0 = 111, ARG:1, ARG:2 = 200\n  ～～\n;错误（初始值仅为常数和常数字符串）\n@FOOBAR, ARG:0 = MASTER, ARG:1 = TARGET\n;如果你为ARG、ARGS和函数中使用#DIM和#DIMS定义的私有变量以外的参数设置初始值，它们将被忽略\n;因此，它将不会像预期的那样工作\n@FOOBAR, X = 5, Y = 4\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="通过引用传递参数" tabindex="-1"><a class="header-anchor" href="#通过引用传递参数" aria-hidden="true">#</a> 通过引用传递参数</h4><p>从ver1.810开始，你可以通过使用引用类型的变量作为临时参数来传递参数。</p><p>关于如何定义参考类型变量的更多信息，请查看关于<a href="">参考类型变量</a>的章节。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@SYSTEM_TITLE\n  A = 0\n  CALL TEST(A)\n  B = 1\n  CALL TEST(B)\n  PRINTFORML A == {A}\n  PRINTFORML B == {B}\n  WAIT\n\n@TEST(HOGE)\n  #DIM REF HOGE\n  HOGE = 100\n  RETURN\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>执行结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>A == 100\nB == 100\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在上面的例子中，函数<code>TEST</code>有一个引用类型的变量作为假参数。</p><p>当<code>TEST</code>第一次被调用时，<code>HOGE</code>将引用真实的参数A。</p><p>通过在函数<code>TEST</code>中设置<code>HOGE=100</code>，参考变量A被分配为100，所以第一个<code>PRINTFORML</code>的结果是100。</p><p>同样地，当第二个<code>TEST</code>被调用时，变量B被分配为100，第二个<code>PRINTFORML</code>的结果也是100。</p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><p>预处理程序决定了一个函数的规格和行为。</p><p>如果一个函数有一个以<code>#</code>开头的预处理器，它必须直接在函数下面。</p><h3 id="only" tabindex="-1"><a class="header-anchor" href="#only" aria-hidden="true">#</a> #ONLY</h3><p>该属性仅适用于事件功能。</p><p>如果有一个指定了<code>#ONLY</code>的事件函数，那么只有这个函数会被执行，而其他同名的事件函数不会被执行。</p><p>如果有多个带有<code>#ONLY</code>的事件函数，那么只有第一个会被执行。</p><h3 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> #FUNCTION</h3><p>这是表达式中函数的一个属性。</p><p>表达式中的函数不能用通常的<code>RETURN</code>来结束，而必须用<code>RETURNF &lt;数值表达式&gt;</code>来结束。</p><p>更多信息见<a href="">用户定义的表达式内函数</a>。</p><h3 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> #FUNCTIONS</h3><p>这是表达式中函数的一个属性。</p><p>表达式中的函数不能用通常的<code>RETURN</code>来结束，而必须用<code>RETURNF &lt;字符串表达式&gt;</code>来结束。</p><p>更多信息见用户定义的表达式内函数。</p><h2 id="定義" tabindex="-1"><a class="header-anchor" href="#定義" aria-hidden="true">#</a> 定義</h2><p>一个预处理程序，定义了一个变量的名称和它的规格。</p><p>如果一个函数有一个以<code>#</code>开头的预处理器，它必须直接位于该函数之下。</p><h3 id="localsize-定数式-localssize-定数式" tabindex="-1"><a class="header-anchor" href="#localsize-定数式-localssize-定数式" aria-hidden="true">#</a> #LOCALSIZE &lt;定数式&gt; &amp; #LOCALSSIZE &lt;定数式&gt;</h3><p>一个预处理程序，用于分别指定每个函数的<code>LOCAL</code>和<code>LOCALS</code>元素的数量。</p><p>常量表达式的结果必须是大于0的整数，如果不是，或者包含变量，或者以不可解释的字符串形式给出，则会被忽略。</p><p>如果忽略，或者不使用这个预处理程序，将照常使用<code>VariableSize.csv</code>中设置的值。</p><p>如果这个预处理器被用于一个事件函数，将使用第一个被执行的预处理器的设置（从ver1800开始）。</p><h3 id="dim" tabindex="-1"><a class="header-anchor" href="#dim" aria-hidden="true">#</a> #DIM</h3><p>一个用户定义的变量声明，可以在ERB的特定函数中使用，定义一个只能在该函数中使用的数字变量。</p><p>更多信息见<a href="">用户定义的变量</a>。</p><p>它们也可以在ERH中用来定义数值变量，其数值可以被所有函数共享。</p><p>更多信息见<a href="">头文件（ERH）</a>。</p><h3 id="dims" tabindex="-1"><a class="header-anchor" href="#dims" aria-hidden="true">#</a> #DIMS</h3><p>一个用户定义的变量声明，可以在ERB的特定函数中使用，定义一个只能在该函数中使用的字符串型变量。</p><p>更多信息见<a href="">用户定义的变量</a>。</p><p>你也可以在ERH中使用它们来定义字符串变量，其值可以被所有函数共享。</p><p>更多信息见<a href="">头文件（ERH）</a>。</p><h3 id="define" tabindex="-1"><a class="header-anchor" href="#define" aria-hidden="true">#</a> #DEFINE</h3><p>声明<code>DEFINE</code>宏，可以在ERH中使用，用另一个预定义的字符串替换所有ERB代码中的一个字符串。</p><p>更多信息见<a href="">头文件（ERH）</a>。</p><h2 id="代表特殊区块的行" tabindex="-1"><a class="header-anchor" href="#代表特殊区块的行" aria-hidden="true">#</a> 代表特殊区块的行</h2><p>这些是预处理程序行。</p><p>在你写它们的同一行中，你不能立即在它们后面加上另一个指令、功能或评论。</p><p>这些并不被 Eramaker 解释，所以你可能需要使用<code>;!;</code>在某些情况下。</p><h3 id="skipstart-skipend" tabindex="-1"><a class="header-anchor" href="#skipstart-skipend" aria-hidden="true">#</a> [SKIPSTART] &amp; [SKIPEND]</h3><p>在<code>[SKIPSTART]</code>和<code>[SKIPEND]</code>之间写入的行不会被 Emuera 读取和执行。</p><p>当你想故意改变 Emuera 和 Eramaker 之间的行为时，就会用到这个方法。</p><p>用它来编写你不希望 Emuera 执行的语句。</p><p>它也可以与<code>;!;</code>一起使用，用来编写你不希望 Emuera 执行的语句。</p><p>更多信息见<a href="">常规</a>章节。</p><h3 id="if-xxx-elseif-xxx-else-endif" tabindex="-1"><a class="header-anchor" href="#if-xxx-elseif-xxx-else-endif" aria-hidden="true">#</a> [IF XXX] &amp; [ELSEIF XXX] &amp; [ELSE] &amp; [ENDIF]</h3><p>根据是否定义了某个名称为XXX的宏，有可能分割执行多行。</p><p>详见<a href="">头文件（ERH）</a>。</p><h3 id="if-debug-endif" tabindex="-1"><a class="header-anchor" href="#if-debug-endif" aria-hidden="true">#</a> [IF_DEBUG] &amp; [ENDIF]</h3><p>写在<code>[IF_DEBUG]</code>和<code>[ENDIF]</code>之间的行只在调试模式下执行。</p><p>在非调试模式下，它被认为是一个注释行，不会被执行。</p><p>然而，在非调试模式下，DEBUG指令原本是被忽略的，所以没有必要在行首放一个<code>;#;</code>。</p><p>同样地，调试变量在非调试模式下是空字符串或零，所以不需要担心错误。</p><p>关于调试模式的更多信息，请看<a href="">这里</a>。</p><h3 id="if-ndebug-endif" tabindex="-1"><a class="header-anchor" href="#if-ndebug-endif" aria-hidden="true">#</a> [IF_NDEBUG] &amp; [ENDIF]</h3><p>在<code>[IF_NDEBUG]</code>和<code>[ENDIF]</code>之间的行，只在非调试模式下执行。</p><p>在调试模式下，它们被视为注释行，不被执行。</p><p>这与<code>[IF_DEBUG]</code>相反。</p><p>关于调试模式的更多信息，请看<a href="">这里</a>。</p>',124);var p=a(n,[["render",function(e,a){return s}]]);export{p as default};
