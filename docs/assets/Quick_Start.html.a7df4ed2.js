import{r as e,c as a,a as n,b as s,w as r,F as p,e as l,d as c,o}from"./app.23a69cc4.js";import{_ as t}from"./plugin-vue_export-helper.5a098b48.js";const i={},d=l('<h1 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h1><p>本文将和你一起编写一个最简单的 Emuera 程序，来快速熟悉 Emuera 游戏的制作流程。</p><h2 id="准备文件" tabindex="-1"><a class="header-anchor" href="#准备文件" aria-hidden="true">#</a> 准备文件</h2><p>为了能够开发一个最精简的游戏，你至少需要下载 Emuera 游戏引擎。</p><blockquote><p>Emuera 项目地址：https://osdn.net/projects/emuera/</p><p>Emuera 官方下载地址：https://osdn.net/projects/emuera/releases/</p></blockquote><p>下载好之后会有一个 zip 压缩文件，解压，并将其中的 exe 文件单独放置在一个空的文件夹中，这个空的文件夹就是我们的游戏根目录，我们用<code>root</code>来代表。</p><p>这样我们就获得了一个工程文件夹，其结构为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>root/\n └─ Emuera1824.exe\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="启动程序" tabindex="-1"><a class="header-anchor" href="#启动程序" aria-hidden="true">#</a> 启动程序</h2><p>如果我们直接启动exe，会得到一个消息框：</p><div class="custom-container danger"><p class="custom-container-title">错误信息<a href="javascript:alert(&#39;TODO&#39;)">索引</a></p><blockquote><p>csvフォルダが見つかりません</p></blockquote><p>翻译：未找到 csv 文件夹。</p></div><p>新建一个名为<code>CSV</code>的文件夹后再启动，会弹出消息框：</p><div class="custom-container danger"><p class="custom-container-title">错误信息<a href="javascript:alert(&#39;TODO&#39;)">索引</a></p><blockquote><p>erbフォルダが見つかりません</p></blockquote><p>翻译：未找到 erb 文件夹。</p></div><p>新建一个名为<code>ERB</code>的文件夹后再启动，此时程序正常运行。</p><p>我们注意到根目录下生成了一个名为<code>emuera.config</code>的配置文件。其中对 Emuera 游戏引擎进行了配置，若想了解更多<strong>引擎配置信息</strong>，请移步<a href="../reference/Config_File">此处</a>。</p><p>程序正常启动后，这样我们根目录的结构就变为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>root/\n ├─ emuera.config\n ├─ Emuera1824.exe\n ├─ CSV/\n └─ ERB/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="运行程序" tabindex="-1"><a class="header-anchor" href="#运行程序" aria-hidden="true">#</a> 运行程序</h2><p>运行后，程序的输出大致为：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Now Loading\n--------------------\n         ()\n\n--------------------\n[0] 最初からはじめる\n[1] ロードしてはじめる\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>其中，最后两行是可以点击的，第一行是“新的开始”，第二行是“加载存档”。</p><p>我们点击“新的开始”，画面输出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>0\n--------------------\n関数の終端でエラーが発生しました:Emuera1824\n関数&quot;@EVENTFIRST&quot;が見つかりません\n※※※ログファイルをroot¥emuera.logに出力しました※※※\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中，第1行的0是代表我们的点击所对应的序号是0，这与我们键盘输入0并回车的效果是一样的。</p><p>最后三行为报错与提示信息，其大意为：</p><ul><li>函数的结尾发生了错误；</li><li>没有找到<code>@EVENTFIRST</code>函数；</li><li>日志已输出到根目录下的<code>emuera.log</code>文件中。</li></ul><p>我们去根目录下打开<code>emuera.log</code>文件，发现其中记录了游戏引擎的全部输出。</p><p>现在我们来解决这个报错。不就是缺少<code>@EventFirst</code>吗？拿来吧你！</p><p>首先，在<code>ERB/</code>文件夹中新建一个名为<code>Syetem.erb</code>的文件；并输入以下代码：</p><div class="custom-container warning"><p class="custom-container-title">该代码含有可期待的错误</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@EventFirst\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><p>搞定！再运行，出现新的报错：</p><div class="custom-container danger"><p class="custom-container-title">错误信息<a href="javascript:alert(&#39;TODO&#39;)">索引</a></p><blockquote><p>予期しないスクリプト終端です</p></blockquote><p>翻译：预期外的脚本结尾</p></div><p>在预想不到的地方遇到了脚本结尾？简单！预想不到我们就让你预想到：</p><p>修改<code>System.erb</code>：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@EventFirst\n  Quit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>再运行，程序没有报错了，然而什么都没有，再点击一下就退出了。</p><p>……也算搞定！</p><p>现在让我们看看究竟发生了什么：</p><p>在第1行，是一个<code>@EventFirst</code>，这一行进行了一个<strong>定义函数</strong>操作。其中，第一个字符<code>@</code>是告诉游戏引擎这一行是定义函数语法的首行。</p><p>紧跟着的<code>EventFirst</code>是<strong>函数名</strong>，也就是为我们定义的函数取一个名字，有了名字，我们以后就可以通过这个名字找到相对应的函数。若要了解更多关于<strong>定义函数</strong>的内容，请移步至<a href="">此处</a>。</p><p>第2行有一个英文单词<code>Quit</code>，即退出。这是个可以单独使用的<strong>语句</strong>。跟在上一行<strong>定义函数</strong>的语句后面，代表新定义的函数的内容就是退出。若要了解更多关于 <strong>“退出”命令</strong> 的内容，请移步至<a href="">此处</a>。</p><p>细心的你可能注意到了，在<code>Quit</code>前还有两个空格，这样，原本<code>Quit</code>的<code>Q</code>是与上一行的<code>@</code>字符对齐的，现在却被挤到后面，和<code>v</code>字符对齐了。</p><p>有点奇怪，对吧？去掉这两个空格可以吗？</p><p><strong>可以！</strong>（你可以去掉之后试试）</p><p><strong>但！</strong> 这不太好~</p><p>想象一下：不久后的某一天，你已经是一个熟练的游戏开发者了，每天可以写一万行游戏脚本，但有一天你突然想在脚本的中间某个部分进行一些修改，你翻到脚本的中间，发现每一行都对齐得整整齐齐，你难以一眼就看出层层叠叠的代码逻辑中的从属关系，在这个时候，你也许会想，要是我在写的时候就把代码之间的从属关系用某种规律表现出来了，也许现在我就不用费力地每一行每一行地去分析了。</p><p>而合理地缩进(行前空格)就是一个成熟的处理方式！</p><p>也许我们不应该在初次见面的时候就聊起这个，但我始终相信，好的习惯从一开始就培养远比中途纠正要好得多~，关于更多脚本风格标准，请移步至 <a href="">MCS 代码风格</a>。</p><p>完全理解了这两行脚本之后，我们联系前面的报错，可以简单地推理出，在点击“新的开始”按钮后，游戏引擎会寻找脚本中的名为<code>EventFirst</code>的函数，并执行它。</p><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World!</h2><p>程序运行倒是没有错误了，但我们怎么才能用它做点什么呢？</p><p>我们就拿程序的入门：Hello World 来做实验吧。</p><p>修改<code>System.erb</code>：</p><div class="language-basic ext-basic line-numbers-mode"><pre class="language-basic"><code>@EventFirst\n  <span class="token function">Print</span> Hello World!\n  Quit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>保存文件后启动程序，看见程序正常输出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Hello World!\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>搞定！</p><h2 id="下一步" tabindex="-1"><a class="header-anchor" href="#下一步" aria-hidden="true">#</a> 下一步</h2><p>现在你已经拥有了一个最为精简的 Emuera 程序了！是不是很简单？</p><p>但要做成实际能玩的游戏，还有很多的工作要做，但在那之前，我们就已经有一些显而易见的事情亟待进行：</p><ul><li>标题一片空白；</li><li>点击“加载游戏”还是会报错；</li><li>程序什么事情都没做。</li></ul><p>别急别急，罗马不是一日建成的！</p>',62),u=c("让我们移步至"),b=c("教程"),m=c("，来为这个精简的小程序添砖加瓦！");var g=t(i,[["render",function(l,c){const t=e("RouterLink");return o(),a(p,null,[d,n("p",null,[u,s(t,{to:"/guide/tutorials/"},{default:r((()=>[b])),_:1}),m])],64)}]]);export{g as default};
