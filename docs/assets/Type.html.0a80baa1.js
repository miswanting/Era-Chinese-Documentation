import{r as s,c as e,a as n,b as a,w as o,F as l,d as r,e as t,o as p}from"./app.4772d866.js";import{_ as i}from"./plugin-vue_export-helper.5a098b48.js";const c={},d=n("h1",{id:"数值与文本",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数值与文本","aria-hidden":"true"},"#"),r(" 数值与文本")],-1),u=n("h2",{id:"前言与确认",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言与确认","aria-hidden":"true"},"#"),r(" 前言与确认")],-1),b=n("p",null,"游戏要求玩家与作品之间存在必要的互动，而对于文字相关的游戏来说，文本的输入输出就是最为关键的一环。如何处理玩家的输入并输出相应的内容呢？我们可以也可以使用命令来实现。",-1),m={class:"custom-container warning"},g=n("p",{class:"custom-container-title"},"教程依赖",-1),v=r("本教程假设您已学习过"),x=n("a",{href:"../Quick_Start"},"快速开始",-1),h=r("和"),k=r("前置教程"),f=r("。若您尚未学习过，我们强烈推荐您首先学习相应教程。"),T=t('<p>先确认一下我们现有的工程文件夹结构：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>root/\n ├─ emuera.config\n ├─ Emuera1824.exe\n ├─ CSV/\n └─ ERB/\n     └─ System.erb\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中，<code>System.erb</code>的代码为：</p><div class="language-basic ext-basic line-numbers-mode"><pre class="language-basic"><code>@EventFirst\n  <span class="token function">Print</span> Hello World!\n  Quit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="数值输入" tabindex="-1"><a class="header-anchor" href="#数值输入" aria-hidden="true">#</a> 数值输入</h2><p>显而易见，我们现在的脚本，即使运行一百次，也不会发生任何变化，只会简单地输出我们已经预先写好的字符串。</p><p>我们来尝试写一些不那么“直接”的东西，请将<code>System.erb</code>中的内容改为这样：</p><div class="language-basic ext-basic line-numbers-mode"><pre class="language-basic"><code>@EventFirst\n  #DimS <span class="token keyword">Const</span> <span class="token function">Text</span> <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span>\n  PrintV <span class="token function">Text</span>\n  Quit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>运行！我们得到下列输出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Hello World!\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>同样成功！</p><p>但……为什么？</p><p>我们现在突然遇到了几个不认识的代码以及几个不熟悉的用法。不过不用担心，我们分别看看：</p><ul><li><code>@EventFirst</code>：<strong>定义函数</strong>。你已经学会了。</li><li><code>#DimS</code>：定义（字符串常量或变量）。这是你第一次见到它，不过它很简单，它的作用就是告诉游戏引擎：“看好了！我接下来要定义一个关于字符串的常量或者变量”。这样游戏引擎就能做好准备。有关更多的<strong>定义常量</strong>、<strong>定义变量</strong>，请移步至<a href="">此处</a>。</li><li><code>Const</code>：<strong>常量</strong>关键字。这很好理解，毕竟前一个短语已经成功地吸引到引擎的注意了，紧跟着的这个关键词就是明确地说这次定义的就是定义的<strong>常量</strong>。</li><li><code>Text</code>：变量名。新定义的常量/变量名称。常量/变量完成定义后，可通过该名称再次找到这个常量/变量。</li><li><code>=</code>：赋值符号。符号右侧的数据装载到符号左侧的变量内，具体到这个地方，符号右边的“Hello World!”这句话，会装载到名为“Text”的变量内。</li><li><code>&quot;Hello World!&quot;</code>：一句十分简单的话。在专业领域内，我们称这样的一串文本为：<strong>字符串</strong>。这很形象，就如同我们把<code>H</code>，<code>e</code>，<code>l</code>……这样的<code>字符</code>“串了起来”。这样的“串”，我们称为“字符串”。</li><li><code>PrintV</code>：一个语句，可以将装载于语句后面的变量内的数据显示在屏幕上。</li><li><code>Quit</code>：退出。你也已经学过了。</li></ul><p>看上去突然增加了许多内容，但细细一捋，才发现游戏脚本就像小说一样，虽然有点絮絮叨叨，但也能被简简单单的理解，不是吗？</p><h2 id="变量的定义与打印" tabindex="-1"><a class="header-anchor" href="#变量的定义与打印" aria-hidden="true">#</a> 变量的定义与打印</h2><p>好了，我们现在已经有一个方法实现不那么“直接”的数据暂存了，但仍然不能够通过改变数据来为游戏增加变化。具体地说，如果我们就是想改变“Hello World!”的文本，怎么办！</p><p>我们改变脚本：</p><div class="custom-container warning"><p class="custom-container-title">该代码含有可期待的错误</p><div class="language-basic ext-basic line-numbers-mode"><pre class="language-basic"><code>@EventFirst\n  #DimS <span class="token keyword">Const</span> <span class="token function">Text</span> <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span>\n  <span class="token function">Text</span> <span class="token operator">=</span> <span class="token string">&quot;How Are You?&quot;</span>\n  PrintV <span class="token function">Text</span>\n  Quit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><p>这样，Text 中的值就可以变化了吗？</p><p>运行得到：</p><div class="custom-container danger"><p class="custom-container-title">错误信息<a href="javascript:alert(&#39;TODO&#39;)">索引</a></p><blockquote><p>System.erbの3行目でエラーが発生しました:Emuera1824</p><p>Text = &quot;How Are You?&quot;</p><p>エラー内容：代入文の左辺に変更できない変数を指定することはできません</p><p>現在の関数：@EVENTFIRST（System.erbの1行目）</p><p>関数呼び出しスタック：</p></blockquote><p>System.erb的第3行发生错误：Emuera1824</p><p>Text = &quot;How Are You?&quot;</p><p>错误：你不能在赋值语句的左边指定一个不能改变的变量</p><p>当前函数：@EVENTFIRST (System.erb第1行)</p><p>函数调用栈：</p></div><p>Hmmmmm.....</p><p>这其实不难理解，毕竟我们定义的<code>Text</code>是个<strong>常量</strong>。</p><p>改成变量就好了！</p><p>修改为：</p><div class="language-basic ext-basic line-numbers-mode"><pre class="language-basic"><code>@EventFirst\n  #DimS <span class="token function">Text</span> <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span>\n  <span class="token function">Text</span> <span class="token operator">=</span> How Are You?\n  PrintV <span class="token function">Text</span>\n  Quit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>运行，看到输出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>How Are You?\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>成功！</p><p>但又有两个问题：</p><ul><li>为何我们直接删掉了<code>Const</code>？</li><li>为何我们使用的是<code>Text = How Are You?</code>，而不是<code>Text = &quot;How Are You?&quot;</code>（字符串外有双引号）</li></ul><p>我想答案也不复杂：</p><ol><li>对于<code>#DimS</code>语句来说，定义变量是<strong>默认</strong>用法，在这种情况下，可以省略。</li><li>我暂时也不知道。不过加上双引号后，显示出来的值也带有双引号，说明赋值在<code>#DimS</code>中和在外面独立使用的表现不一样。那就当作是”固定搭配“吧2333333</li></ol>',34);var q=i(c,[["render",function(r,t){const i=s("RouterLink");return p(),e(l,null,[d,u,b,n("div",m,[g,n("p",null,[v,x,h,a(i,{to:"/guide/tutorials/"},{default:o((()=>[k])),_:1}),f])]),T],64)}]]);export{q as default};
