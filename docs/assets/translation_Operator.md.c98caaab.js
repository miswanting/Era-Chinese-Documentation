import{o as e,c as t,a as d}from"./app.1f302d32.js";const l='{"title":"运算","description":"","frontmatter":{},"headers":[{"level":2,"title":"运算符","slug":"运算符"},{"level":3,"title":"单项运算符","slug":"单项运算符"},{"level":3,"title":"二元运算符","slug":"二元运算符"},{"level":3,"title":"三元运算符","slug":"三元运算符"},{"level":3,"title":"赋值运算符","slug":"赋值运算符"},{"level":3,"title":"递增运算符 & 递减运算符","slug":"递增运算符-递减运算符"},{"level":2,"title":"临时的运算符优先权表格","slug":"临时的运算符优先权表格"},{"level":2,"title":"添加的运算","slug":"添加的运算"},{"level":2,"title":"逻辑运算符的短路评估","slug":"逻辑运算符的短路评估"}],"relativePath":"translation/Operator.md","lastUpdated":1631723953096}',a={},r=[d('<h1 id="运算" tabindex="-1">运算 <a class="header-anchor" href="#运算" aria-hidden="true">#</a></h1><blockquote><p>翻译自原文档：<a href="https://osdn.net/projects/emuera/wiki/exop" target="_blank" rel="noopener noreferrer">https://osdn.net/projects/emuera/wiki/exop</a></p></blockquote><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-hidden="true">#</a></h2><h3 id="单项运算符" tabindex="-1">单项运算符 <a class="header-anchor" href="#单项运算符" aria-hidden="true">#</a></h3><h3 id="二元运算符" tabindex="-1">二元运算符 <a class="header-anchor" href="#二元运算符" aria-hidden="true">#</a></h3><h3 id="三元运算符" tabindex="-1">三元运算符 <a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a></h3><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a></h3><h3 id="递增运算符-递减运算符" tabindex="-1">递增运算符 &amp; 递减运算符 <a class="header-anchor" href="#递增运算符-递减运算符" aria-hidden="true">#</a></h3><h2 id="临时的运算符优先权表格" tabindex="-1">临时的运算符优先权表格 <a class="header-anchor" href="#临时的运算符优先权表格" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">优先级</th><th style="text-align:center;">替换复合运算</th><th style="text-align:center;">符号</th></tr></thead><tbody><tr><td style="text-align:center;">负数运算符</td><td style="text-align:center;">高</td><td style="text-align:center;">false</td><td style="text-align:center;"><code>~</code>, <code>!</code></td></tr><tr><td style="text-align:center;">算术运算符</td><td style="text-align:center;">↑</td><td style="text-align:center;">true</td><td style="text-align:center;"><code>*</code>, <code>/</code>, <code>%</code></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">true</td><td style="text-align:center;"><code>+</code>, <code>-</code></td></tr><tr><td style="text-align:center;">位移运算符</td><td style="text-align:center;"></td><td style="text-align:center;">true</td><td style="text-align:center;"><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td></tr><tr><td style="text-align:center;">比较运算符</td><td style="text-align:center;"></td><td style="text-align:center;">false</td><td style="text-align:center;"><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">false</td><td style="text-align:center;"><code>==</code>, <code>!=</code></td></tr><tr><td style="text-align:center;">逻辑运算符</td><td style="text-align:center;"></td><td style="text-align:center;">true</td><td style="text-align:center;"><code>&amp;</code>, `</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">↓</td><td style="text-align:center;">false</td><td style="text-align:center;"><code>&amp;&amp;</code>, <code>!&amp;</code>, `</td></tr><tr><td style="text-align:center;">三元运算符</td><td style="text-align:center;">低</td><td style="text-align:center;">false</td><td style="text-align:center;"><code>～?…#＿</code></td></tr></tbody></table><h2 id="添加的运算" tabindex="-1">添加的运算 <a class="header-anchor" href="#添加的运算" aria-hidden="true">#</a></h2><ul><li><p><code>==</code>：字符串与字符串的比较。你不能将数字与字符串进行比较。</p></li><li><p><code>!=</code>：字符串与字符串的比较。</p></li><li><p><code>&lt;</code>：字符串与字符串的比较。比较从一开始就进行，当发现不同的字符时就会确定。</p></li><li><p><code>&gt;</code>：字符串与字符串的比较。</p></li><li><p><code>&lt;=</code>：字符串与字符串的比较。</p></li><li><p><code>&gt;=</code>：字符串与字符串的比较。</p></li><li><p><code>+</code>：字符串与字符串的连接。 数字和字符串不能被添加或连接。</p></li><li><p><code>*</code>：字符串和整数的乘法。 不能将一个字符串乘以一个字符串。</p><div class="language-"><pre><code>STR:0 = % &quot;啊&quot; * 10 %\nPRINTFORML STR:0 = &quot;%STR:0%&quot;\nWAIT\n;等价于\nSTR:0 = &quot;啊啊啊啊啊啊啊啊啊啊&quot;\n</code></pre></div></li></ul><h2 id="逻辑运算符的短路评估" tabindex="-1">逻辑运算符的短路评估 <a class="header-anchor" href="#逻辑运算符的短路评估" aria-hidden="true">#</a></h2><p>短路评估是指，例如，如果X在表达式（X &amp;&amp; Y）中为零，那么很明显，无论Y的值如何，操作的结果都是零，所以Y不被评估。</p><p>在许多语言中，包括 Kirikiri，逻辑运算符是短路的。</p><p>这种评价方法使我们可以写出：</p><div class="language-"><pre><code>IF (ASSI &gt;= 0) &amp;&amp; (NO:ASSI == 1)\n  ～～～\nELSE \n  ～～～\nENDIF \n</code></pre></div><p>如果ASSI小于或等于0，<code>NO:ASSI</code>不被引用，因为总的结果是0，不管（NO:ASSI == 1）的结果如何。因此，不会产生错误。</p><p>评估的顺序是左项在先，右项殿后。</p><div class="language-"><pre><code>IF (NO:ASSI == 1) &amp;&amp; (ASSI &gt;= 0)\n</code></pre></div><p>如果你这样写，它将首先尝试计算（NO:ASSI == 1），如果ASSI&lt;0，将导致错误。</p>',21)];a.render=function(d,l,a,n,c,i){return e(),t("div",null,r)};export{l as __pageData,a as default};
